学籍番号 61414050 丹羽直也
ベースマシンのスペック
電力 p:base 26.0537 mW
遅延 d:base 10.0 ns

プログラムごとの実行クロック数(base)
c(norm):base 907
c(swap):base 805
c(grade):base 2126

コンテスト参加マシンのスペック
電力 p:contest 26.5815 mW
遅延 d:contest 9.85 ns

プログラムごとの実行クロック数(contest)
c(norm):contest 305
c(swap):contest 404
c(grade):contest 204

性能比の相乗平均
( (d:base * c(norm):base) / (d:contest * c(norm):contest)
* (d:base * c(swap):base) / (d:contest * c(swap):contest)
* (d:base * c(grade):base) / (d:contest * c(grade):contest)) ^ (1/3)
= ((10.0 * 907) / (9.85 * 305) * (10.0 * 805) / (9.85 * 404) * (10.0 * 2126) / (9.85 * 204))^(1/3)
= 4.01281
電力比率
p:base / p:contest = 26.0537 / 26.5815
= 0.98014

電力性能
3.9331

= 主に行った高速化方策

grade命令の実装
ベースマシンでのprog_gradeは2000クロックを超えており、これのクロック数を大幅に削減することができれば、
必然的にスコアが伸びる。当初の実装はslti命令での分岐を繰り返していたが、
これだと平均2回の分岐、そして1回の分岐あたりにslti命令と実質2クロック消費するbnq命令がいるため、
分岐だけで概ね6クロック消耗している。
この分岐をハードウェアで行ってしまえば、かなりの高速化が期待できる。
比較演算の回路規模はそこまで大きくないため、
非常に効率よく実施できる。また、今回は乗算器がEステージにあり、
そのパスが長いため、その横に回路を並べてしまえば、クリティカルパスに影響を及ぼさない。
当初、grade命令はレジスタの値を見て成績をレジスタに書き出す仕様だったが、
これを更に推し進めて、直接メモリに書き込むI型命令とした。
sw命令の改造であり、writedataEから分岐して次ステージのwritedataMとの間にマルチプレクサを入れた。
この位置はまさにALUの横にあたり、遅延時間が余っている場所である。
今回行った高速化の中で一番効果が大きかった。

乗算器をALUから吐き出す
クリティカルパスのデータを見ると、8.5ns以上の遅延時間がある乗算器は悩みの種である。
乗算器自体の廃止は難しい以上、周期が8.5nsを割ることはできないが、
すこしでも削減したい。
ALUは出力にマルチプレクサがついており、ごく僅かではあるが遅延する。
クリティカルパスのレポートを見るとalu_1/yとalu_1/mult_8/PRODUCTの間は0.14nsの遅延である。
乗算命令の時だけMステージで条件分岐を行うことにして、
乗算器をsrca、srcbから一気にMステージまで直結させることで、わずかにクリティカルパスを短縮できた。
ただし効果は殆ど無く、Verilogのコードが煩雑になってしまった。

ループアンローリング
ある意味で王道である。各プログラムのディレクトリにgenasm.pyというPythonスクリプトを用意した。
このスクリプトはそれぞれのアセンブラを標準出力に出力するスクリプトである。
分岐命令は遅延スロットをうまく使っても1クロックは消耗するため、
今回はデータ数が100あるため、ただ展開するだけでも100クロック削減できる。

コードスケジューリング
授業で説明されていたコードスケジューリングにより、stallを極力抑えた。
最終的に3つのプログラム全てでstallが0になっている。
この最適化はループアンローリングとの組み合わせでうまく行った。
prog_normの場合
1つのループだけで考えるとlwの後にはmult、addという順序でしか処理ができないため、
どうしてもlwの後に1回ストールする。
しかしループアンローリングを行った状態を考えると、lwした後に、そのさらに1つ前にlwしたデータのmultを行い、
その結果を別のレジスタに書き込んで、ストールを回避することができる。
multもaddも遅延が大きい演算器を使用しているため、複合命令にしてしまうとクロックが落ちる。
1データあたり3クロックをどうしても消耗することを考えると305クロックというのはかなり理想的である。

prog_swapの場合
2つのデータをlwし、またそれぞれをswするだけだが、それゆえにレジスタアクセスがストールしやすい。
2つのデータを扱うため、それぞれ交互にレジスタを使うことで、ストールを回避した。
2つのデータそれぞれにlw、swが必須なので、1データあたり4クロック必要である。
404クロックというというのはかなり理想的である。

prog_gradeの場合
前述のgradeは実質swと同じような動きをするため、swapと似ている。
ひたすらlwとgradeを叩くだけだが、そのままやるとstallする。
normと同じ要領で、lwの直後にはそれより前のデータをgradeすることで、stallを回避する。
仕組み上一気に10個のレジスタにlwしてからgradeしても問題ないが、
2つ交互に使うだけでストールを回避できるため、レジスタを節約という意味で、
2つ交互に使うようにした。1つのデータあたりlwとgradeと2クロック必要であるため、
204クロックというのは理想的である。

= その他考察
高速化アプローチでは実行するコードの最適化、複合命令の追加、
クロック周波数の向上の大きく3つのアプローチでいどんだ。
前2つは前述のとおり成功したが、クロック周波数の方は乗算器が大きな障害となりうまくいかなかった。
ベースマシンのクリティカルパスのレポートを見ると乗算器だけで8.5ns以上遅延しており、
これにメスを入れるには、
* 乗算器を2クロックで実行する
* 乗算器を分割し1部の処理をデコードステージで行う
と言った方法が考えられた。しかしながら、前者は前後の命令との干渉を回避する方法が思いつかず、
後者は乗算器にはIPを使用しておりほぼ手がつけられないため無理であった。
であるからには、周波数を上げることが困難であるため、パイプラインを3段に削減してみるという
手法もあるが、結果としてはコードスケジューリングがうまく行ったため、余り効果は無い。

asm.plで未定義なxorやnorを削除しようとしたが、今回、命令を削ってはならないとの事だったため、
触れずに放置した。結果として他のアプローチが満足な結果を生み出した。

今回の評価に使う電力性能の計算式はいささか複雑である。
また、電力や遅延などのデータの読み取りを手で行うと時間がかかる。
行った改良の結果を即座に確認できるようにするために、
Makefileの大幅な改良や幾つかのシェルスクリプトを用いて、
prog_*フォルダでは各プログラムの実行と検証、
クロック数の書き出しを、
contestフォルダでは論理合成と電力性能の算出を自動化した。

